import * as dotenv from "dotenv";
dotenv.config();
import { create } from "venom-bot";
import { getDavinciResponse, getDalleResponse, BOT_NUMBER } from "./openAI.js";

// Start Express Server
import express from "express";
const app = express();
const port = process.env.PORT || 3000;

app.get("/", (req, res) => {
  res.send("Hello World! ğŸ¤– - Chat GPT Bot - Created by @imasimali ğŸš€");
});
app.listen(port, () => console.log(`App listening on port ${port}!`));
// End

// BOT START
create({
  session: "Chat-GPT",
  multidevice: true,
})
  .then((client) => start(client))
  .catch((error) => {
    console.log(error);
  });

const commands = (client, message) => {
  const botCommands = {
    davinci3: "/bot",
    dalle: "/img",
  };

  let firstWord = message.text.substring(0, message.text.indexOf(" "));

  switch (firstWord) {
    case botCommands.davinci3:
      const question = message.text.substring(message.text.indexOf(" "));
      try {
        getDavinciResponse(question, message.from).then((response) => {
          // Check if the message is from the bot or the user
          client.sendText(
            message.from === BOT_NUMBER ? message.to : message.from,
            response
          );
        });
      } catch (error) {
        console.error(error);
      }
      break;

    case botCommands.dalle:
      const imgDescription = message.text.substring(message.text.indexOf(" "));
      try {
        getDalleResponse(imgDescription, message).then((imgUrl) => {
          client
            .sendImage(
              message.from === BOT_NUMBER ? message.to : message.from,
              imgUrl,
              imgDescription,
              "Image generated by DALL-E ğŸ¤–"
            )
            .catch((e) => {
              client.sendText(
                message.from === BOT_NUMBER ? message.to : message.from,
                imgUrl
              );
            });
        });
      } catch (error) {
        console.error(error);
      }
      break;
  }
};

async function start(client) {
  client.onAnyMessage((message) => commands(client, message));
}
